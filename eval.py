# -*- coding: utf-8 -*-
"""eval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YXGIRxI3nCRMkxGZIfCoEYGnz1f4m30-
"""
import argparse
import os
import time
import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import torch.nn as nn
import numpy as np
import glob
from PIL import Image

# from google.colab import drive
# drive.mount("/content/drive")

# filepath = '/content/drive/MyDrive/Colab Notebooks/CNN_Project/datasets'

parser = argparse.ArgumentParser()
parser.add_argument('--test_root', type=str, default='/content/drive/MyDrive/Colab Notebooks/CNN_Project/datasets/test', help='directory of training set')
parser.add_argument('--save_dir', type=str, default='/content/drive/MyDrive/Colab Notebooks/CNN_Project/saved_model', help='directory of saved model')
opt = parser.parse_args()

class imgDataset():
    def __init__(self, root, transform=None):
          self.root = root
          self.transform = transform
          self.files = glob.glob(f"{root}/*.jpg")
  
    def __len__(self):
          return len(self.files)

    def __getitem__(self, index):
          image = Image.open(self.files[index])
          image = self.transform(image)
          return image

import matplotlib.pyplot as plt

# files = glob.glob(f"{filepath}/*.jpg")
# print(files)
# image = Image.open(files[0])
# plt.imshow(image)

test_root = opt.test_root
save_dir = opt.save_dir

test_dataset = imgDataset(root=test_root,
                          transform=transforms.Compose([
                                                        transforms.ToTensor()
                          ]))
test_loader = DataLoader(test_dataset,
                         batch_size=1,
                         shuffle=False,
                         drop_last=False)

# filepath = '/content/drive/MyDrive/Colab Notebooks/CNN_Project'
state_path = f'{save_dir}/model_state_dict.pt'
model = torchvision.models.resnet101(pretrained=True)
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 2, bias=True)
model = model.cuda()
model.load_state_dict(torch.load(state_path))
model.eval()

prediction_index = []
transform = transforms.ToPILImage()

for _, (batch) in enumerate(test_loader):
    batch = batch.cuda()
    prediction = model(batch)
    _, i = prediction.max(dim=1)
    prediction_index += i.tolist()

# fig = plt.figure(figsize=(25, 25))
nTest = len(test_dataset)

def pos_or_neg(res):
    if res == 1:
        return "Positive"
    else:
        return "Negative"

files = glob.glob(f"{test_root}/*.jpg")

for i in range(nTest):
    print(f"file name : {str(files[i])[(len(test_root) + 1):]}")
    print(f"predict : {str(pos_or_neg(prediction_index[i]))}\n")
    # fig.add_subplot(nTest, 1, i+1)
    # plt.imshow(transform(test_dataset[i]))
    # plt.title(f"predict : {str(prediction_index[i])}")

